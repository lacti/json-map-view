{"version":3,"sources":["utils/node.ts","utils/filter.ts","components/FilterHeader.tsx","components/SelectedButtonNode.tsx","components/ButtonNode.tsx","components/NonTerminalNode.tsx","components/LinkNode.tsx","components/TooltipNode.tsx","components/TerminalNode.tsx","components/NodeView.tsx","components/MapView.tsx","components/MapSourceUrl.tsx","App.tsx","utils/parameter.ts","serviceWorker.ts","index.tsx"],"names":["getNodeFrom","body","selectedNodeKeys","filters","applyFilter","node","level","condition","result","Object","keys","nodeKey","includes","applyFilterFrom","i","selectedNodeKey","FilterHeader","placeholder","onKeyUp","type","SelectedButtonNode","className","ButtonNode","onNodeKeySelected","onClick","NonTerminalNode","LinkNode","text","link","href","title","TooltipNode","tooltip","TerminalNode","value","test","NodeView","model","map","key","MapView","headers","newNullArray","Array","length","fill","useState","setSelectedNodeKeys","setFilters","getNode","updateFilters","newValue","old","index","updateFiltersFrom","updateSelectedNodeKeys","newKey","updateSelectedNodeKeysFrom","header","event","target","newNodeKey","MapSourceUrl","url","setUrl","defaultValue","onKeyPress","undefined","App","window","location","search","URLSearchParams","get","setMap","useEffect","fetch","then","r","json","data","catch","error","console","alert","message","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d133f433.chunk.js","sourcesContent":["import { IMapNode } from \"../models/node\";\nimport { applyFilterFrom } from \"./filter\";\n\nexport const getNodeFrom = (\n  body: IMapNode,\n  selectedNodeKeys: Array<string | null>,\n  filters: Array<string | null>\n) => {\n  const applyFilter = applyFilterFrom(filters);\n  return (level: number) => {\n    let node: IMapNode | undefined = applyFilter(body, 0);\n    for (let i = 0; i < level; i++) {\n      const selectedNodeKey = selectedNodeKeys[i];\n      if (!node || !selectedNodeKey) {\n        return undefined;\n      }\n      node = applyFilter(node[selectedNodeKey] as IMapNode, i + 1);\n    }\n    return node;\n  };\n};\n\nexport const updateSelectedNodeKeysFrom = (\n  selectedNodeKeys: Array<string | null>\n) => (level: number, newKey: string) =>\n  selectedNodeKeys.map((old, index) =>\n    index < level ? old : index === level ? newKey : null\n  );\n","import { IMapNode } from \"../models/node\";\n\nexport const applyFilterFrom = (filters: Array<string | null>) => (\n  node: IMapNode,\n  level: number\n) => {\n  if (!node) {\n    return node;\n  }\n  const condition = filters[level];\n  if (!condition) {\n    return node;\n  }\n  const result: IMapNode = {};\n  for (const nodeKey of Object.keys(node)) {\n    if (nodeKey.includes(condition)) {\n      result[nodeKey] = node[nodeKey];\n    }\n  }\n  return result;\n};\n\nexport const updateFiltersFrom = (filters: Array<string | null>) => (\n  level: number,\n  newValue: string\n) => filters.map((old, index) => (index !== level ? old : newValue));\n","import React from \"react\";\n\nconst FilterHeader: React.SFC<{\n  placeholder?: string;\n  onKeyUp?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}> = ({ placeholder, onKeyUp }) => (\n  <input type=\"text\" onKeyUp={onKeyUp} placeholder={placeholder} />\n);\n\nexport default FilterHeader;\n","import React from \"react\";\n\nconst SelectedButtonNode: React.SFC<{ nodeKey: string }> = ({ nodeKey }) => (\n  <button className=\"selected\">{nodeKey}</button>\n);\n\nexport default SelectedButtonNode;\n","import React from \"react\";\n\nconst ButtonNode: React.SFC<{\n  nodeKey: string;\n  onNodeKeySelected: (nodeKey: string) => void;\n}> = ({ nodeKey, onNodeKeySelected }) => (\n  <button onClick={() => onNodeKeySelected(nodeKey)}>{nodeKey}</button>\n);\n\nexport default ButtonNode;\n","import React from \"react\";\nimport SelectedButtonNode from \"./SelectedButtonNode\";\nimport ButtonNode from \"./ButtonNode\";\n\nconst NonTerminalNode: React.SFC<{\n  nodeKey: string;\n  selectedNodeKey: string | null;\n  onNodeKeySelected: (nodeKey: string) => void;\n}> = ({ nodeKey, selectedNodeKey, onNodeKeySelected }) =>\n  selectedNodeKey === nodeKey ? (\n    <SelectedButtonNode nodeKey={nodeKey} />\n  ) : (\n    <ButtonNode nodeKey={nodeKey} onNodeKeySelected={onNodeKeySelected} />\n  );\n\nexport default NonTerminalNode;\n","import React from \"react\";\n\nconst LinkNode: React.SFC<{ text: string; link: string }> = ({\n  text,\n  link\n}) => (\n  <a href={link} title={link}>\n    {text}\n  </a>\n);\n\nexport default LinkNode;\n","import React from \"react\";\n\nconst TooltipNode: React.SFC<{ text: string; tooltip: string }> = ({\n  text,\n  tooltip\n}) => <span title={tooltip}>{text}</span>;\n\nexport default TooltipNode;\n","import React from \"react\";\nimport LinkNode from \"./LinkNode\";\nimport TooltipNode from \"./TooltipNode\";\n\nconst TerminalNode: React.SFC<{ text: string; value: string }> = ({\n  text,\n  value\n}) =>\n  /^(http|\\/|\\.)/i.test(value) ? (\n    <LinkNode text={text} link={value} />\n  ) : (\n    <TooltipNode text={text} tooltip={value} />\n  );\n\nexport default TerminalNode;\n","import React from \"react\";\nimport NonTerminalNode from \"./NonTerminalNode\";\nimport TerminalNode from \"./TerminalNode\";\nimport { IMapNode } from \"../models/node\";\n\nconst NodeView: React.SFC<{\n  model: IMapNode;\n  selectedNodeKey: string | null;\n  onNodeKeySelected: (nodeKey: string) => void;\n}> = ({ model, selectedNodeKey, onNodeKeySelected }) => (\n  <ul>\n    {Object.keys(model).map(nodeKey => (\n      <li key={nodeKey}>\n        {typeof model[nodeKey] === \"string\" ? (\n          <TerminalNode text={nodeKey} value={model[nodeKey] as string} />\n        ) : (\n          <NonTerminalNode\n            nodeKey={nodeKey}\n            selectedNodeKey={selectedNodeKey}\n            onNodeKeySelected={onNodeKeySelected}\n          />\n        )}\n      </li>\n    ))}\n  </ul>\n);\n\nexport default NodeView;\n","import React, { useState } from \"react\";\nimport { IMap } from \"../models/map\";\nimport { getNodeFrom, updateSelectedNodeKeysFrom } from \"../utils/node\";\nimport FilterHeader from \"./FilterHeader\";\nimport NodeView from \"./NodeView\";\nimport { updateFiltersFrom } from \"../utils/filter\";\n\nconst MapView: React.SFC<{ map: IMap }> = ({ map: { headers, body } }) => {\n  const newNullArray = () => Array(headers.length).fill(null);\n  const [selectedNodeKeys, setSelectedNodeKeys] = useState<\n    Array<string | null>\n  >(newNullArray());\n  const [filters, setFilters] = useState<Array<string | null>>(newNullArray());\n\n  const getNode = getNodeFrom(body, selectedNodeKeys, filters);\n  const updateFilters = updateFiltersFrom(filters);\n  const updateSelectedNodeKeys = updateSelectedNodeKeysFrom(selectedNodeKeys);\n  return (\n    <div className=\"row\">\n      {headers.map((header, level) => {\n        const model = getNode(level);\n        return (\n          <div key={header} className=\"column\">\n            <FilterHeader\n              placeholder={header}\n              onKeyUp={event =>\n                setFilters(\n                  updateFilters(level, (event.target as HTMLInputElement).value)\n                )\n              }\n            />\n            {model && (\n              <NodeView\n                model={model}\n                selectedNodeKey={selectedNodeKeys[level]}\n                onNodeKeySelected={newNodeKey =>\n                  setSelectedNodeKeys(updateSelectedNodeKeys(level, newNodeKey))\n                }\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default MapView;\n","import React from \"react\";\n\nconst MapSourceUrl: React.SFC<{\n  url: string | null;\n  setUrl: (newUrl: string) => void;\n}> = ({ url, setUrl }) => (\n  <div className=\"sourceUrl\">\n    <input\n      type=\"text\"\n      defaultValue={url || \"\"}\n      placeholder=\"Map JSON URL\"\n      onKeyPress={event =>\n        event.key === \"Enter\"\n          ? setUrl((event.target as HTMLInputElement).value)\n          : undefined\n      }\n    />\n  </div>\n);\n\nexport default MapSourceUrl;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport MapView from \"./components/MapView\";\nimport { IMap } from \"./models/map\";\nimport MapSourceUrl from \"./components/MapSourceUrl\";\nimport { getMapUrlFromQueryString } from \"./utils/parameter\";\n\nconst App: React.SFC = () => {\n  const [url, setUrl] = useState<string | null>(getMapUrlFromQueryString());\n  const [map, setMap] = useState<IMap | null>(null);\n  useEffect(() => {\n    if (url) {\n      fetch(url)\n        .then(r => r.json())\n        .then(data => setMap(data))\n        .catch(error => {\n          setMap(null);\n          console.error(error);\n          alert(error.message);\n        });\n    }\n  }, [url]);\n  return (\n    <div className=\"app\">\n      <MapSourceUrl url={url} setUrl={setUrl} />\n      {map && <MapView map={map} />}\n    </div>\n  );\n};\n\nexport default App;\n","export const getMapUrlFromQueryString = () => {\n  if (!window || !window.location || !window.location.search) {\n    return null;\n  }\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"map\");\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}