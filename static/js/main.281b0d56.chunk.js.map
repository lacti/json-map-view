{"version":3,"sources":["utils/filter.ts","utils/node.ts","components/FilterHeader.tsx","components/NodeKey.tsx","components/SelectedButtonNode.tsx","components/ButtonNode.tsx","components/NonTerminalNode.tsx","components/LinkNode.tsx","components/TooltipNode.tsx","components/TerminalNode.tsx","components/NodeView.tsx","utils/share.ts","components/MapView.tsx","components/MapSourceUrl.tsx","App.tsx","utils/parameter.ts","serviceWorker.ts","index.tsx"],"names":["includes","node","nodeKey","condition","toLowerCase","childNode","Object","keys","getNodeFrom","root","allOfSelectedNodeKeys","filters","applyFilter","currentLevel","level","result","applyFilterFrom","i","selectedNodeKeys","selectAndMergeNodes","mergeNodes","filter","key","map","length","parent","multiSelected","newNode","childKeys","unique","flatMap","childKey","childNodes","childValues","buildNewKey","forEach","reference","childValue","join","values","Set","FilterHeader","placeholder","onKeyUp","value","type","defaultValue","NodeKey","Fragment","split","nodeKeyText","index","className","SelectedButtonNode","nodeValue","onNodeKeyToggled","countOfChildren","onClick","title","ButtonNode","NonTerminalNode","name","text","substring","indexOf","trim","references","e","LinkNode","link","href","target","TooltipNode","tooltip","TerminalNode","test","compare","a","b","localeCompare","count","NodeView","model","entries","sort","getCurrentUrl","window","location","Error","currentUrl","gotoShareUrl","state","replace","hashIndex","lz","compress","JSON","stringify","outputEncoding","buildShareUrl","MapView","headers","body","newNullArray","Array","fill","stateFromUrl","parse","decompress","inputEncoding","error","console","getStateFromUrl","log","useState","setSelectedNodeKeys","setFilters","setSelectedNodeKeysWithState","shareUrl","copy","alert","getNode","updateFilters","newValue","old","updateFiltersFrom","toggleSelectedNodeKey","each","updateSelectedNodeKeysFrom","toggleSelectedNodeKeys","selected","toggleAllSelectedNodeKeysFrom","header","selectedNodeKeysOfCurrentLevel","toggleAll","event","setFiltersWithState","id","MapSourceUrl","url","setUrl","onKeyPress","undefined","App","search","URLSearchParams","get","setMap","useEffect","fetch","then","r","json","data","catch","message","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.281b0d56.chunk.js","sourcesContent":["import { IMapNode } from \"../models/node\";\n\nexport const applyFilterFrom = (filters: Array<string | null>) => (\n  node: IMapNode,\n  currentLevel: number\n): IMapNode => {\n  if (!node) {\n    return {} as IMapNode;\n  }\n  for (let level = currentLevel; level >= 0; --level) {\n    const condition = filters[level];\n    if (!condition) {\n      continue;\n    }\n    const result: IMapNode = {};\n    for (const nodeKey of Object.keys(node)) {\n      if (includes(node, nodeKey, condition)) {\n        result[nodeKey] = node[nodeKey];\n      }\n    }\n    return result;\n  }\n  return node;\n};\n\nconst includes = (\n  node: IMapNode,\n  nodeKey: string,\n  condition: string\n): boolean => {\n  if (nodeKey.toLowerCase().includes(condition.toLowerCase())) {\n    return true;\n  }\n  if (typeof node[nodeKey] !== \"string\") {\n    const childNode = node[nodeKey] as IMapNode;\n    for (const childNodeKey of Object.keys(childNode)) {\n      if (includes(childNode, childNodeKey, condition)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const updateFiltersFrom = (filters: Array<string | null>) => (\n  level: number,\n  newValue: string\n) => filters.map((old, index) => (index !== level ? old : newValue));\n","import { IMapNode } from \"../models/node\";\nimport { applyFilterFrom } from \"./filter\";\n\nexport const nodeNameDelimiter = \"$$\";\n\nexport const getNodeFrom = (\n  root: IMapNode,\n  allOfSelectedNodeKeys: Array<string[] | null>,\n  filters: Array<string | null>\n) => {\n  const applyFilter = applyFilterFrom(filters);\n  return (level: number): IMapNode => {\n    let node: IMapNode = applyFilter(root, 0);\n    for (let i = 0; i < level; i++) {\n      const selectedNodeKeys = allOfSelectedNodeKeys[i];\n      if (!selectedNodeKeys) {\n        return {};\n      }\n      node = applyFilter(selectAndMergeNodes(node, selectedNodeKeys), i + 1);\n      if (!node) {\n        return {};\n      }\n    }\n    return node;\n  };\n};\n\nconst selectAndMergeNodes = (node: IMapNode, selectedNodeKeys: string[]) =>\n  mergeNodes(\n    selectedNodeKeys\n      .filter(key => !!node && !!node[key])\n      .map(key => [key, node![key] as IMapNode]),\n    selectedNodeKeys.length > 1\n  );\n\nexport const updateSelectedNodeKeysFrom = (\n  selectedNodeKeys: Array<string[] | null>\n) => (level: number, nodeKey: string) =>\n  selectedNodeKeys.map((old, index) =>\n    index < level\n      ? old\n      : index > level\n      ? null\n      : (old || []).includes(nodeKey)\n      ? (old || []).filter(each => each !== nodeKey)\n      : [...(old || []), nodeKey]\n  );\n\nexport const mergeNodes = (\n  parent: [string /* reference */, IMapNode][],\n  multiSelected: boolean\n): IMapNode => {\n  const newNode: IMapNode = {};\n  const childKeys = unique(\n    parent.map(([_, node]) => node).flatMap(node => Object.keys(node))\n  );\n  for (const childKey of childKeys) {\n    const childNodes: [string, IMapNode][] = parent\n      .filter(\n        ([, node]) => !!node[childKey] && typeof node[childKey] !== \"string\"\n      )\n      .map(([reference, node]) => [reference, node[childKey] as IMapNode]);\n    if (childNodes.length > 0) {\n      newNode[childKey] = mergeNodes(childNodes, multiSelected);\n    }\n\n    const childValues: [string, string][] = parent\n      .filter(\n        ([, node]) => !!node[childKey] && typeof node[childKey] === \"string\"\n      )\n      .map(([reference, node]) => [reference, node[childKey] as string]);\n\n    if (childValues.length === 1) {\n      newNode[\n        multiSelected ? buildNewKey(childKey, childValues[0][0]) : childKey\n      ] = childValues[0][1];\n    } else if (childValues.length > 1) {\n      childValues.forEach(\n        ([reference, childValue]) =>\n          (newNode[buildNewKey(childKey, reference)] = childValue)\n      );\n    }\n  }\n  return newNode;\n};\n\nconst buildNewKey = (key: string, reference: string) =>\n  [key, reference].join(nodeNameDelimiter);\n\nconst unique = <T>(values?: T[]) => [...new Set(values || [])];\n\nexport const toggleAllSelectedNodeKeysFrom = (\n  selectedNodeKeys: Array<string[] | null>\n) => (level: number, model: IMapNode, selected: boolean) =>\n  selectedNodeKeys.map((old, index) =>\n    index !== level\n      ? index < level\n        ? old\n        : null\n      : selected\n      ? Object.keys(model)\n      : null\n  );\n","import React from \"react\";\n\nconst FilterHeader: React.FC<{\n  placeholder?: string;\n  value: string | null;\n  onKeyUp?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}> = ({ placeholder, onKeyUp, value }) => (\n  <input\n    type=\"text\"\n    onKeyUp={onKeyUp}\n    placeholder={placeholder}\n    defaultValue={value || \"\"}\n  />\n);\n\nexport default FilterHeader;\n","import React from \"react\";\n\nconst NodeKey: React.FC<{\n  nodeKey: string;\n}> = ({ nodeKey }) => (\n  <React.Fragment>\n    {nodeKey.split(\" \").map((nodeKeyText, index) =>\n      index === 0 ? (\n        <span key={index} className=\"node-text\">\n          {nodeKeyText}\n        </span>\n      ) : (\n        <React.Fragment key={index}>\n          <br />\n          <span className=\"node-text\">{nodeKeyText}</span>\n        </React.Fragment>\n      )\n    )}\n  </React.Fragment>\n);\n\nexport default NodeKey;\n","import React from \"react\";\nimport { IMapNode } from \"../models/node\";\nimport NodeKey from \"./NodeKey\";\n\nconst SelectedButtonNode: React.FC<{\n  nodeKey: string;\n  nodeValue: IMapNode;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ nodeKey, nodeValue, onNodeKeyToggled }) => {\n  const countOfChildren = Object.keys(nodeValue).length;\n  return (\n    <button\n      className=\"selected\"\n      onClick={() => onNodeKeyToggled(nodeKey)}\n      title={`${nodeKey} (${countOfChildren})`}\n    >\n      <NodeKey nodeKey={nodeKey} />\n      <span className=\"count\">({countOfChildren})</span>\n    </button>\n  );\n};\n\nexport default SelectedButtonNode;\n","import React from \"react\";\nimport { IMapNode } from \"../models/node\";\nimport NodeKey from \"./NodeKey\";\n\nconst ButtonNode: React.FC<{\n  nodeKey: string;\n  nodeValue: IMapNode;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ nodeKey, nodeValue, onNodeKeyToggled }) => {\n  const countOfChildren = Object.keys(nodeValue).length;\n  return (\n    <button\n      onClick={() => onNodeKeyToggled(nodeKey)}\n      title={`${nodeKey} (${countOfChildren})`}\n    >\n      <NodeKey nodeKey={nodeKey} />\n      <span className=\"count\">({countOfChildren})</span>\n    </button>\n  );\n};\n\nexport default ButtonNode;\n","import React from \"react\";\nimport SelectedButtonNode from \"./SelectedButtonNode\";\nimport ButtonNode from \"./ButtonNode\";\nimport { IMapNode } from \"../models/node\";\n\nconst NonTerminalNode: React.FC<{\n  nodeKey: string;\n  nodeValue: IMapNode;\n  selectedNodeKeys: string[] | null;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ nodeKey, nodeValue, selectedNodeKeys, onNodeKeyToggled }) =>\n  !!selectedNodeKeys && selectedNodeKeys.includes(nodeKey) ? (\n    <SelectedButtonNode\n      nodeKey={nodeKey}\n      nodeValue={nodeValue}\n      onNodeKeyToggled={onNodeKeyToggled}\n    />\n  ) : (\n    <ButtonNode\n      nodeKey={nodeKey}\n      nodeValue={nodeValue}\n      onNodeKeyToggled={onNodeKeyToggled}\n    />\n  );\n\nexport default NonTerminalNode;\n","import React from \"react\";\nimport { nodeNameDelimiter } from \"../utils/node\";\n\nconst LinkNode: React.FC<{ text: string; link: string }> = ({ text, link }) => (\n  // eslint-disable-next-line\n  <a className=\"link\" href={link} title={link} target=\"_blank\">\n    <span className=\"text\">{name(text)}</span>\n    {references(text).map(reference => (\n      <span key={reference} className=\"reference\">\n        {reference}\n      </span>\n    ))}\n  </a>\n);\n\nconst name = (text: string) =>\n  text.includes(nodeNameDelimiter)\n    ? text\n        .substring(text.indexOf(\"]\") + 1, text.indexOf(nodeNameDelimiter))\n        .trim()\n    : text.substring(text.indexOf(\"]\") + 1).trim();\nconst references = (text: string) =>\n  text.includes(nodeNameDelimiter)\n    ? text\n        .substring(text.indexOf(nodeNameDelimiter) + nodeNameDelimiter.length)\n        .split(nodeNameDelimiter)\n        .map(e => e.trim())\n    : [];\n\nexport default LinkNode;\n","import React from \"react\";\n\nconst TooltipNode: React.FC<{ text: string; tooltip: string }> = ({\n  text,\n  tooltip\n}) => (\n  <span className=\"link\" title={tooltip}>\n    {text}\n  </span>\n);\n\nexport default TooltipNode;\n","import React from \"react\";\nimport LinkNode from \"./LinkNode\";\nimport TooltipNode from \"./TooltipNode\";\n\nconst TerminalNode: React.FC<{ text: string; value: string }> = ({\n  text,\n  value\n}) =>\n  /^(http|\\/|\\.)/i.test(value) ? (\n    <LinkNode text={text} link={value} />\n  ) : (\n    <TooltipNode text={text} tooltip={value} />\n  );\n\nexport default TerminalNode;\n","import React from \"react\";\nimport NonTerminalNode from \"./NonTerminalNode\";\nimport TerminalNode from \"./TerminalNode\";\nimport { IMapNode } from \"../models/node\";\n\nconst NodeView: React.FC<{\n  model: IMapNode;\n  selectedNodeKeys: string[] | null;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ model, selectedNodeKeys, onNodeKeyToggled }) => (\n  <ul>\n    {Object.entries(model)\n      .filter(([, nodeValue]) => typeof nodeValue !== \"string\")\n      .sort(compare)\n      .map(([nodeKey, nodeValue]) => (\n        <li key={nodeKey}>\n          <NonTerminalNode\n            nodeKey={nodeKey}\n            nodeValue={nodeValue as IMapNode}\n            selectedNodeKeys={selectedNodeKeys}\n            onNodeKeyToggled={onNodeKeyToggled}\n          />\n        </li>\n      ))}\n    {Object.entries(model)\n      .filter(([, nodeValue]) => typeof nodeValue === \"string\")\n      .sort(compare)\n      .map(([nodeKey, nodeValue]) => (\n        <li key={nodeKey}>\n          <TerminalNode text={nodeKey} value={nodeValue as string} />\n        </li>\n      ))}\n  </ul>\n);\n\ntype NodeValue = string | IMapNode;\ntype NodeEntry = [string, NodeValue];\nconst compare = (a: NodeEntry, b: NodeEntry) =>\n  typeof a[1] === \"string\"\n    ? a[0].localeCompare(b[0])\n    : count(b[1]) - count(a[1]);\n\nconst count = (node: NodeValue) =>\n  typeof node === \"string\" ? node.length : Object.keys(node).length;\n\nexport default NodeView;\n","import lz from \"lzutf8\";\n\nconst getCurrentUrl = () => {\n  if (!window || !window.location) {\n    throw new Error(`Invalid window.location`);\n  }\n  const currentUrl = window.location.href;\n  if (!currentUrl) {\n    throw new Error(`Invalid window.location.href`);\n  }\n  return currentUrl;\n};\n\nexport const buildShareUrl = <T>(state: T) => {\n  const currentUrl = getCurrentUrl();\n  const hashIndex = currentUrl.indexOf(\"#\");\n  return (\n    (hashIndex >= 0 ? currentUrl.substring(0, hashIndex) : currentUrl) +\n    \"#\" +\n    lz.compress(JSON.stringify(state), { outputEncoding: \"Base64\" })\n  );\n};\n\nexport const gotoShareUrl = <T>(state: T) =>\n  window.location.replace(buildShareUrl(state));\n\nexport const getStateFromUrl = <T>(): T | null => {\n  const currentUrl = getCurrentUrl();\n  const hashIndex = currentUrl.indexOf(\"#\");\n  if (hashIndex < 0) {\n    return null;\n  }\n  try {\n    return JSON.parse(\n      lz.decompress(currentUrl.substring(hashIndex + 1), {\n        inputEncoding: \"Base64\"\n      })\n    ) as T;\n  } catch (error) {\n    console.error(`Invalid state at URL`, error);\n    return null;\n  }\n};\n","import copy from \"clipboard-copy\";\nimport React, { useState } from \"react\";\nimport { ContextMenu, ContextMenuTrigger, MenuItem } from \"react-contextmenu\";\nimport { IMap } from \"../models/map\";\nimport {\n  getNodeFrom,\n  updateSelectedNodeKeysFrom,\n  toggleAllSelectedNodeKeysFrom\n} from \"../utils/node\";\nimport FilterHeader from \"./FilterHeader\";\nimport NodeView from \"./NodeView\";\nimport { updateFiltersFrom } from \"../utils/filter\";\nimport { gotoShareUrl, getStateFromUrl } from \"../utils/share\";\n\ninterface IMapViewState {\n  selectedNodeKeys: Array<string[] | null>;\n  filters: Array<string | null>;\n}\n\nconst MapView: React.FC<{ map: IMap }> = ({ map: { headers, body } }) => {\n  const newNullArray = () => Array(headers.length).fill(null);\n  const stateFromUrl = getStateFromUrl<IMapViewState>();\n  console.log(stateFromUrl);\n  const [selectedNodeKeys, setSelectedNodeKeys] = useState<\n    Array<string[] | null>\n  >(stateFromUrl ? stateFromUrl.selectedNodeKeys : newNullArray());\n  const [filters, setFilters] = useState<Array<string | null>>(\n    stateFromUrl ? stateFromUrl.filters : newNullArray()\n  );\n\n  const setSelectedNodeKeysWithState = (\n    selectedNodeKeys: IMapViewState[\"selectedNodeKeys\"]\n  ) => {\n    gotoShareUrl<IMapViewState>({ selectedNodeKeys, filters });\n    return setSelectedNodeKeys(selectedNodeKeys);\n  };\n\n  const setFiltersWithState = (filters: IMapViewState[\"filters\"]) => {\n    gotoShareUrl<IMapViewState>({ selectedNodeKeys, filters });\n    return setFilters(filters);\n  };\n\n  const shareUrl = () => {\n    gotoShareUrl<IMapViewState>({ selectedNodeKeys, filters });\n    copy(window.location.href);\n    alert(`URL copied!\\n` + window.location.href);\n  };\n\n  const getNode = getNodeFrom(body, selectedNodeKeys, filters);\n  const updateFilters = updateFiltersFrom(filters);\n  const toggleSelectedNodeKey = updateSelectedNodeKeysFrom(selectedNodeKeys);\n  const toggleSelectedNodeKeys = toggleAllSelectedNodeKeysFrom(\n    selectedNodeKeys\n  );\n  return (\n    <div className=\"row\">\n      {headers.map((header, level) => {\n        const model = getNode(level);\n        const selectedNodeKeysOfCurrentLevel = selectedNodeKeys[level];\n        const hasSelected =\n          selectedNodeKeysOfCurrentLevel !== null &&\n          selectedNodeKeysOfCurrentLevel.length > 0;\n        const className = hasSelected ? `column selected` : `column`;\n        const toggleAll = (selected: boolean) =>\n          setSelectedNodeKeysWithState(\n            toggleSelectedNodeKeys(level, model, selected)\n          );\n        return (\n          <div key={header} className={className}>\n            <FilterHeader\n              placeholder={header}\n              value={filters[level]}\n              onKeyUp={event =>\n                setFiltersWithState(\n                  updateFilters(level, (event.target as HTMLInputElement).value)\n                )\n              }\n            />\n            <ContextMenuTrigger id={`ToggleMenu-${header}`}>\n              <NodeView\n                model={model}\n                selectedNodeKeys={selectedNodeKeysOfCurrentLevel}\n                onNodeKeyToggled={nodeKey =>\n                  setSelectedNodeKeysWithState(\n                    toggleSelectedNodeKey(level, nodeKey)\n                  )\n                }\n              />\n            </ContextMenuTrigger>\n            <ContextMenu id={`ToggleMenu-${header}`}>\n              {level < headers.length - 1 && (\n                <React.Fragment>\n                  <MenuItem onClick={() => toggleAll(true)}>\n                    Select all\n                  </MenuItem>\n                  <MenuItem onClick={() => toggleAll(false)}>\n                    Deselect all\n                  </MenuItem>\n                </React.Fragment>\n              )}\n              <MenuItem onClick={shareUrl}>Copy this URL</MenuItem>\n            </ContextMenu>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default MapView;\n","import React from \"react\";\n\nconst MapSourceUrl: React.FC<{\n  url: string | null;\n  setUrl: (newUrl: string) => void;\n}> = ({ url, setUrl }) => (\n  <div className=\"sourceUrl\">\n    <input\n      type=\"text\"\n      defaultValue={url || \"\"}\n      placeholder=\"Map JSON URL\"\n      onKeyPress={event =>\n        event.key === \"Enter\"\n          ? setUrl((event.target as HTMLInputElement).value)\n          : undefined\n      }\n    />\n  </div>\n);\n\nexport default MapSourceUrl;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport MapView from \"./components/MapView\";\nimport { IMap } from \"./models/map\";\nimport MapSourceUrl from \"./components/MapSourceUrl\";\nimport { getMapUrlFromQueryString } from \"./utils/parameter\";\n\nconst App: React.FC = () => {\n  const [url, setUrl] = useState<string | null>(getMapUrlFromQueryString());\n  const [map, setMap] = useState<IMap | null>(null);\n  useEffect(() => {\n    if (url) {\n      fetch(url)\n        .then(r => r.json())\n        .then(data => setMap(data))\n        .catch(error => {\n          setMap(null);\n          console.error(error);\n          alert(error.message);\n        });\n    }\n  }, [url]);\n  return (\n    <div className=\"app\">\n      <MapSourceUrl url={url} setUrl={setUrl} />\n      {map && <MapView map={map} />}\n    </div>\n  );\n};\n\nexport default App;\n","export const getMapUrlFromQueryString = () => {\n  if (!window || !window.location || !window.location.search) {\n    return null;\n  }\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"map\");\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}