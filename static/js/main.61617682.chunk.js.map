{"version":3,"sources":["utils/node.ts","utils/filter.ts","components/FilterHeader.tsx","components/NodeKey.tsx","components/SelectedButtonNode.tsx","components/ButtonNode.tsx","components/NonTerminalNode.tsx","components/LinkNode.tsx","components/TooltipNode.tsx","components/TerminalNode.tsx","components/NodeView.tsx","components/MapView.tsx","components/MapSourceUrl.tsx","App.tsx","utils/parameter.ts","serviceWorker.ts","index.tsx"],"names":["getNodeFrom","root","allOfSelectedNodeKeys","filters","applyFilter","node","level","condition","result","Object","keys","nodeKey","includes","some","each","applyFilterFrom","i","selectedNodeKeys","selectAndMergeNodes","mergeNodes","filter","key","map","length","parent","multiSelected","newNode","childKeys","unique","flatMap","childKey","childNodes","childValues","buildNewKey","forEach","reference","childValue","join","values","Set","FilterHeader","placeholder","onKeyUp","type","NodeKey","Fragment","split","nodeKeyText","index","className","SelectedButtonNode","nodeValue","onNodeKeyToggled","countOfChildren","onClick","title","ButtonNode","NonTerminalNode","name","text","substring","indexOf","trim","references","e","LinkNode","link","href","target","TooltipNode","tooltip","TerminalNode","value","test","compare","a","b","localeCompare","count","NodeView","model","entries","sort","MapView","headers","body","newNullArray","Array","fill","useState","setSelectedNodeKeys","setFilters","getNode","updateFilters","newValue","old","updateFiltersFrom","toggleSelectedNodeKey","updateSelectedNodeKeysFrom","toggleSelectedNodeKeys","toggleAllSelectedNodeKeysFrom","header","selectedNodeKeysOfCurrentLevel","onDoubleClick","event","MapSourceUrl","url","setUrl","defaultValue","onKeyPress","undefined","App","window","location","search","URLSearchParams","get","setMap","useEffect","fetch","then","r","json","data","catch","error","console","alert","message","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61617682.chunk.js","sourcesContent":["import { IMapNode } from \"../models/node\";\nimport { applyFilterFrom } from \"./filter\";\n\nexport const nodeNameDelimiter = \"$$\";\n\nexport const getNodeFrom = (\n  root: IMapNode,\n  allOfSelectedNodeKeys: Array<string[] | null>,\n  filters: Array<string | null>\n) => {\n  const applyFilter = applyFilterFrom(filters);\n  return (level: number): IMapNode => {\n    let node: IMapNode = applyFilter(root, 0);\n    for (let i = 0; i < level; i++) {\n      const selectedNodeKeys = allOfSelectedNodeKeys[i];\n      if (!selectedNodeKeys) {\n        return {};\n      }\n      node = applyFilter(selectAndMergeNodes(node, selectedNodeKeys), i + 1);\n      if (!node) {\n        return {};\n      }\n    }\n    return node;\n  };\n};\n\nconst selectAndMergeNodes = (node: IMapNode, selectedNodeKeys: string[]) =>\n  mergeNodes(\n    selectedNodeKeys\n      .filter(key => !!node && !!node[key])\n      .map(key => [key, node![key] as IMapNode]),\n    selectedNodeKeys.length > 1\n  );\n\nexport const updateSelectedNodeKeysFrom = (\n  selectedNodeKeys: Array<string[] | null>\n) => (level: number, nodeKey: string) =>\n  selectedNodeKeys.map((old, index) =>\n    index < level\n      ? old\n      : index > level\n      ? null\n      : (old || []).includes(nodeKey)\n      ? (old || []).filter(each => each !== nodeKey)\n      : [...(old || []), nodeKey]\n  );\n\nexport const mergeNodes = (\n  parent: [string /* reference */, IMapNode][],\n  multiSelected: boolean\n): IMapNode => {\n  const newNode: IMapNode = {};\n  const childKeys = unique(\n    parent.map(([_, node]) => node).flatMap(node => Object.keys(node))\n  );\n  for (const childKey of childKeys) {\n    const childNodes: [string, IMapNode][] = parent\n      .filter(\n        ([, node]) => !!node[childKey] && typeof node[childKey] !== \"string\"\n      )\n      .map(([reference, node]) => [reference, node[childKey] as IMapNode]);\n    if (childNodes.length > 0) {\n      newNode[childKey] = mergeNodes(childNodes, multiSelected);\n    }\n\n    const childValues: [string, string][] = parent\n      .filter(\n        ([, node]) => !!node[childKey] && typeof node[childKey] === \"string\"\n      )\n      .map(([reference, node]) => [reference, node[childKey] as string]);\n\n    if (childValues.length === 1) {\n      newNode[\n        multiSelected ? buildNewKey(childKey, childValues[0][0]) : childKey\n      ] = childValues[0][1];\n    } else if (childValues.length > 1) {\n      childValues.forEach(\n        ([reference, childValue]) =>\n          (newNode[buildNewKey(childKey, reference)] = childValue)\n      );\n    }\n  }\n  return newNode;\n};\n\nconst buildNewKey = (key: string, reference: string) =>\n  [key, reference].join(nodeNameDelimiter);\n\nconst unique = <T>(values?: T[]) => [...new Set(values || [])];\n\nexport const toggleAllSelectedNodeKeysFrom = (\n  selectedNodeKeys: Array<string[] | null>\n) => (level: number, model: IMapNode) =>\n  selectedNodeKeys.map((old, index) =>\n    index !== level\n      ? old\n      : old != null && old.length > 0\n      ? null\n      : Object.keys(model)\n  );\n","import { IMapNode } from \"../models/node\";\n\nexport const applyFilterFrom = (filters: Array<string | null>) => (\n  node: IMapNode,\n  level: number\n): IMapNode => {\n  if (!node) {\n    return {} as IMapNode;\n  }\n  const condition = filters[level];\n  if (!condition) {\n    return node;\n  }\n  const result: IMapNode = {};\n  for (const nodeKey of Object.keys(node)) {\n    if (\n      nodeKey.includes(condition) ||\n      (typeof node[nodeKey] !== \"string\" &&\n        Object.keys(node[nodeKey]).some(each => each.includes(condition)))\n    ) {\n      result[nodeKey] = node[nodeKey];\n    }\n  }\n  return result;\n};\n\nexport const updateFiltersFrom = (filters: Array<string | null>) => (\n  level: number,\n  newValue: string\n) => filters.map((old, index) => (index !== level ? old : newValue));\n","import React from \"react\";\n\nconst FilterHeader: React.SFC<{\n  placeholder?: string;\n  onKeyUp?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}> = ({ placeholder, onKeyUp }) => (\n  <input type=\"text\" onKeyUp={onKeyUp} placeholder={placeholder} />\n);\n\nexport default FilterHeader;\n","import React from \"react\";\n\nconst NodeKey: React.SFC<{\n  nodeKey: string;\n}> = ({ nodeKey }) => (\n  <React.Fragment>\n    {nodeKey.split(\" \").map((nodeKeyText, index) =>\n      index === 0 ? (\n        <span key={index} className=\"node-text\">\n          {nodeKeyText}\n        </span>\n      ) : (\n        <React.Fragment key={index}>\n          <br />\n          <span className=\"node-text\">{nodeKeyText}</span>\n        </React.Fragment>\n      )\n    )}\n  </React.Fragment>\n);\n\nexport default NodeKey;\n","import React from \"react\";\nimport { IMapNode } from \"../models/node\";\nimport NodeKey from \"./NodeKey\";\n\nconst SelectedButtonNode: React.SFC<{\n  nodeKey: string;\n  nodeValue: IMapNode;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ nodeKey, nodeValue, onNodeKeyToggled }) => {\n  const countOfChildren = Object.keys(nodeValue).length;\n  return (\n    <button\n      className=\"selected\"\n      onClick={() => onNodeKeyToggled(nodeKey)}\n      title={`${nodeKey} (${countOfChildren})`}\n    >\n      <NodeKey nodeKey={nodeKey} />\n      <span className=\"count\">({countOfChildren})</span>\n    </button>\n  );\n};\n\nexport default SelectedButtonNode;\n","import React from \"react\";\nimport { IMapNode } from \"../models/node\";\nimport NodeKey from \"./NodeKey\";\n\nconst ButtonNode: React.SFC<{\n  nodeKey: string;\n  nodeValue: IMapNode;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ nodeKey, nodeValue, onNodeKeyToggled }) => {\n  const countOfChildren = Object.keys(nodeValue).length;\n  return (\n    <button\n      onClick={() => onNodeKeyToggled(nodeKey)}\n      title={`${nodeKey} (${countOfChildren})`}\n    >\n      <NodeKey nodeKey={nodeKey} />\n      <span className=\"count\">({countOfChildren})</span>\n    </button>\n  );\n};\n\nexport default ButtonNode;\n","import React from \"react\";\nimport SelectedButtonNode from \"./SelectedButtonNode\";\nimport ButtonNode from \"./ButtonNode\";\nimport { IMapNode } from \"../models/node\";\n\nconst NonTerminalNode: React.SFC<{\n  nodeKey: string;\n  nodeValue: IMapNode;\n  selectedNodeKeys: string[] | null;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ nodeKey, nodeValue, selectedNodeKeys, onNodeKeyToggled }) =>\n    !!selectedNodeKeys && selectedNodeKeys.includes(nodeKey) ? (\n      <SelectedButtonNode nodeKey={nodeKey} nodeValue={nodeValue} onNodeKeyToggled={onNodeKeyToggled} />\n    ) : (\n        <ButtonNode nodeKey={nodeKey} nodeValue={nodeValue} onNodeKeyToggled={onNodeKeyToggled} />\n      );\n\nexport default NonTerminalNode;\n","import React from \"react\";\nimport { nodeNameDelimiter } from \"../utils/node\";\n\nconst LinkNode: React.SFC<{ text: string; link: string }> = ({\n  text,\n  link\n}) => (\n  // eslint-disable-next-line\n  <a className=\"link\" href={link} title={link} target=\"_blank\">\n    <span className=\"text\">{name(text)}</span>\n    {references(text).map(reference => (\n      <span key={reference} className=\"reference\">\n        {reference}\n      </span>\n    ))}\n  </a>\n);\n\nconst name = (text: string) =>\n  text.includes(nodeNameDelimiter)\n    ? text\n        .substring(text.indexOf(\"]\") + 1, text.indexOf(nodeNameDelimiter))\n        .trim()\n    : text.substring(text.indexOf(\"]\") + 1).trim();\nconst references = (text: string) =>\n  text.includes(nodeNameDelimiter)\n    ? text\n        .substring(text.indexOf(nodeNameDelimiter) + nodeNameDelimiter.length)\n        .split(nodeNameDelimiter)\n        .map(e => e.trim())\n    : [];\n\nexport default LinkNode;\n","import React from \"react\";\n\nconst TooltipNode: React.SFC<{ text: string; tooltip: string }> = ({\n  text,\n  tooltip\n}) => (\n  <span className=\"link\" title={tooltip}>\n    {text}\n  </span>\n);\n\nexport default TooltipNode;\n","import React from \"react\";\nimport LinkNode from \"./LinkNode\";\nimport TooltipNode from \"./TooltipNode\";\n\nconst TerminalNode: React.SFC<{ text: string; value: string }> = ({\n  text,\n  value\n}) =>\n  /^(http|\\/|\\.)/i.test(value) ? (\n    <LinkNode text={text} link={value} />\n  ) : (\n    <TooltipNode text={text} tooltip={value} />\n  );\n\nexport default TerminalNode;\n","import React from \"react\";\nimport NonTerminalNode from \"./NonTerminalNode\";\nimport TerminalNode from \"./TerminalNode\";\nimport { IMapNode } from \"../models/node\";\n\nconst NodeView: React.SFC<{\n  model: IMapNode;\n  selectedNodeKeys: string[] | null;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ model, selectedNodeKeys, onNodeKeyToggled }) => (\n  <ul>\n    {Object.entries(model)\n      .filter(([, nodeValue]) => typeof nodeValue !== \"string\")\n      .sort(compare)\n      .map(([nodeKey, nodeValue]) => (\n        <li key={nodeKey}>\n          <NonTerminalNode\n            nodeKey={nodeKey}\n            nodeValue={nodeValue as IMapNode}\n            selectedNodeKeys={selectedNodeKeys}\n            onNodeKeyToggled={onNodeKeyToggled}\n          />\n        </li>\n      ))}\n    {Object.entries(model)\n      .filter(([, nodeValue]) => typeof nodeValue === \"string\")\n      .sort(compare)\n      .map(([nodeKey, nodeValue]) => (\n        <li key={nodeKey}>\n          <TerminalNode text={nodeKey} value={nodeValue as string} />\n        </li>\n      ))}\n  </ul>\n);\n\ntype NodeValue = string | IMapNode;\ntype NodeEntry = [string, NodeValue];\nconst compare = (a: NodeEntry, b: NodeEntry) =>\n  typeof a[1] === 'string'\n    ? a[0].localeCompare(b[0])\n    : count(b[1]) - count(a[1])\n\nconst count = (node: NodeValue) => typeof node === 'string' ? node.length : Object.keys(node).length;\n\nexport default NodeView;\n","import React, { useState } from \"react\";\nimport { IMap } from \"../models/map\";\nimport {\n  getNodeFrom,\n  updateSelectedNodeKeysFrom,\n  toggleAllSelectedNodeKeysFrom\n} from \"../utils/node\";\nimport FilterHeader from \"./FilterHeader\";\nimport NodeView from \"./NodeView\";\nimport { updateFiltersFrom } from \"../utils/filter\";\n\nconst MapView: React.SFC<{ map: IMap }> = ({ map: { headers, body } }) => {\n  const newNullArray = () => Array(headers.length).fill(null);\n  const [selectedNodeKeys, setSelectedNodeKeys] = useState<\n    Array<string[] | null>\n  >(newNullArray());\n  const [filters, setFilters] = useState<Array<string | null>>(newNullArray());\n\n  const getNode = getNodeFrom(body, selectedNodeKeys, filters);\n  const updateFilters = updateFiltersFrom(filters);\n  const toggleSelectedNodeKey = updateSelectedNodeKeysFrom(selectedNodeKeys);\n  const toggleSelectedNodeKeys = toggleAllSelectedNodeKeysFrom(\n    selectedNodeKeys\n  );\n  return (\n    <div className=\"row\">\n      {headers.map((header, level) => {\n        const model = getNode(level);\n        const selectedNodeKeysOfCurrentLevel = selectedNodeKeys[level];\n        const hasSelected =\n          selectedNodeKeysOfCurrentLevel !== null &&\n          selectedNodeKeysOfCurrentLevel.length > 0;\n        const className = hasSelected ? `column selected` : `column`;\n        return (\n          <div\n            key={header}\n            className={className}\n            onDoubleClick={() =>\n              setSelectedNodeKeys(toggleSelectedNodeKeys(level, model))\n            }\n          >\n            <FilterHeader\n              placeholder={header}\n              onKeyUp={event =>\n                setFilters(\n                  updateFilters(level, (event.target as HTMLInputElement).value)\n                )\n              }\n            />\n            <NodeView\n              model={model}\n              selectedNodeKeys={selectedNodeKeysOfCurrentLevel}\n              onNodeKeyToggled={nodeKey =>\n                setSelectedNodeKeys(toggleSelectedNodeKey(level, nodeKey))\n              }\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default MapView;\n","import React from \"react\";\n\nconst MapSourceUrl: React.SFC<{\n  url: string | null;\n  setUrl: (newUrl: string) => void;\n}> = ({ url, setUrl }) => (\n  <div className=\"sourceUrl\">\n    <input\n      type=\"text\"\n      defaultValue={url || \"\"}\n      placeholder=\"Map JSON URL\"\n      onKeyPress={event =>\n        event.key === \"Enter\"\n          ? setUrl((event.target as HTMLInputElement).value)\n          : undefined\n      }\n    />\n  </div>\n);\n\nexport default MapSourceUrl;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport MapView from \"./components/MapView\";\nimport { IMap } from \"./models/map\";\nimport MapSourceUrl from \"./components/MapSourceUrl\";\nimport { getMapUrlFromQueryString } from \"./utils/parameter\";\n\nconst App: React.SFC = () => {\n  const [url, setUrl] = useState<string | null>(getMapUrlFromQueryString());\n  const [map, setMap] = useState<IMap | null>(null);\n  useEffect(() => {\n    if (url) {\n      fetch(url)\n        .then(r => r.json())\n        .then(data => setMap(data))\n        .catch(error => {\n          setMap(null);\n          console.error(error);\n          alert(error.message);\n        });\n    }\n  }, [url]);\n  return (\n    <div className=\"app\">\n      <MapSourceUrl url={url} setUrl={setUrl} />\n      {map && <MapView map={map} />}\n    </div>\n  );\n};\n\nexport default App;\n","export const getMapUrlFromQueryString = () => {\n  if (!window || !window.location || !window.location.search) {\n    return null;\n  }\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"map\");\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}