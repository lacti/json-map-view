{"version":3,"sources":["utils/filter.ts","utils/query.ts","utils/node.ts","utils/collection.ts","components/FilterHeader.tsx","components/NodeKey.tsx","components/SelectedButtonNode.tsx","components/ButtonNode.tsx","components/NonTerminalNode.tsx","components/LinkNode.tsx","components/TooltipNode.tsx","components/TerminalNode.tsx","components/NodeView.tsx","utils/state.ts","components/MapView.tsx","components/MapSourceUrl.tsx","utils/parameter.ts","components/QueryHeader.tsx","utils/share.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["applyFilter","node","filter","effectiveFilter","toLowerCase","filtered","Object","entries","key","value","acceptable","includes","keys","some","childKey","applyQuery","root","fullQuery","split","reduce","intermediate","keyword","filterRecursively","level","parentSelected","filteredNode","filteredKeys","targetKeys","length","filteredChild","selectAndMergeNodes","selectedNodeKeys","skipReference","mergeNodes","map","parent","multiSelected","values","newNode","childKeys","flatMap","Set","childNodes","childValues","buildNewKey","forEach","reference","childValue","join","FilterHeader","placeholder","onKeyUp","type","defaultValue","NodeKey","nodeKey","Fragment","nodeKeyText","index","className","SelectedButtonNode","nodeValue","onNodeKeyToggled","countOfChildren","onClick","title","ButtonNode","NonTerminalNode","name","text","substring","indexOf","trim","references","e","LinkNode","link","href","target","TooltipNode","tooltip","TerminalNode","test","compare","a","b","localeCompare","count","NodeView","model","sort","viewStateStore","initial","notify","generateNewValue","useReactState","set","newValue","MapView","headers","body","viewState","setViewState","useViewState","newNullArray","Array","fill","setSelectedNodeKeys","filters","setFilters","skipReferenceLevel","setSkipReferenceLevel","useDebouncedCallback","updateFilters","debouncedFilter","shareUrl","copy","window","location","alert","getNode","allOfSelectedNodeKeys","query","queriedRoot","leveledNodes","0","selectedParentNodeKeys","getNodeFrom","old","updateFiltersFrom","toggleSelectedNodeKey","each","updateSelectedNodeKeysFrom","toggleSelectedNodeKeys","selected","toggleAllSelectedNodeKeysFrom","header","selectedNodeKeysOfCurrentLevel","toggleAll","event","id","_","disabled","MapSourceUrl","url","setUrl","onKeyPress","undefined","getMapUrlFromQueryString","search","URLSearchParams","get","QueryHeader","getCurrentUrl","Error","currentUrl","gotoShareUrl","state","replace","hashIndex","lz","compress","JSON","stringify","outputEncoding","buildShareUrl","useStateFromUrl","parse","decompress","inputEncoding","error","console","getStateFromUrl","App","useState","setMap","setQuery","newQuery","debouncedQuery","useEffect","fetch","then","r","json","data","catch","message","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d15df667.chunk.js","sourcesContent":["import { IMapNode } from \"../models/node\";\n\nexport const applyFilter = (node: IMapNode, filter: string | null) => {\n  if (!filter) {\n    return node;\n  }\n  const effectiveFilter = filter.toLowerCase();\n  const filtered: IMapNode = {};\n  for (const [key, value] of Object.entries(node)) {\n    if (acceptable(key, value, effectiveFilter)) {\n      filtered[key] = value;\n    }\n  }\n  return filtered;\n};\n\nconst acceptable = (key: string, value: string | IMapNode, filter: string) => {\n  if (key.toLowerCase().includes(filter)) {\n    return true;\n  }\n  if (typeof value !== \"string\") {\n    return Object.keys(value).some(childKey =>\n      childKey.toLowerCase().includes(filter)\n    );\n  }\n  return false;\n};\n\nexport const updateFiltersFrom = (filters: Array<string | null>) => (\n  level: number,\n  newValue: string\n) => filters.map((old, index) => (index !== level ? old : newValue));\n","import { IMapNode } from \"../models/node\";\n\nexport const applyQuery = (root: IMapNode, fullQuery: string | null) => {\n  if (!fullQuery) {\n    return root;\n  }\n  const filterRecursively = (\n    keyword: string,\n    node: IMapNode,\n    level: number,\n    parentSelected: boolean\n  ) => {\n    const filteredNode: IMapNode = {};\n    const filteredKeys = Object.keys(node).filter(key =>\n      key.toLowerCase().includes(keyword)\n    );\n    const targetKeys =\n      filteredKeys.length > 0 ? filteredKeys : Object.keys(node);\n    for (const key of targetKeys) {\n      const value = node[key];\n      if (key.toLowerCase() === keyword) {\n        filteredNode[key] = value;\n        continue;\n      }\n\n      if (typeof value === \"string\") {\n        if (key.toLowerCase().includes(keyword)) {\n          filteredNode[key] = value;\n        }\n      } else {\n        const filteredChild = filterRecursively(\n          keyword,\n          value,\n          level + 1,\n          filteredKeys.length > 0\n        );\n        if (Object.keys(filteredChild).length > 0) {\n          filteredNode[key] = filteredChild;\n        }\n      }\n    }\n    if (parentSelected && Object.keys(filteredNode).length === 0) {\n      return node;\n    }\n    return filteredNode;\n  };\n  return fullQuery\n    .toLowerCase()\n    .split(/\\s+/)\n    .reduce(\n      (intermediate, keyword) =>\n        filterRecursively(keyword, intermediate, 0, false),\n      root\n    );\n};\n","import { IMapNode } from \"../models/node\";\nimport { applyFilter } from \"./filter\";\nimport { unique } from \"./collection\";\nimport { applyQuery } from \"./query\";\n\nexport const nodeNameDelimiter = \"$$\";\n\nexport const getNodeFrom = (\n  root: IMapNode,\n  allOfSelectedNodeKeys: Array<string[] | null>,\n  filters: Array<string | null>,\n  query: string | null,\n  skipReferenceLevel: number\n) => {\n  const queriedRoot = applyQuery(root, query);\n  const leveledNodes: { [level: number]: IMapNode } = {\n    0: applyFilter(queriedRoot, filters[0])\n  };\n\n  for (let level = 1; level < allOfSelectedNodeKeys.length; level++) {\n    const selectedParentNodeKeys = allOfSelectedNodeKeys[level - 1];\n    if (selectedParentNodeKeys === null) {\n      break;\n    }\n    leveledNodes[level] = applyFilter(\n      selectAndMergeNodes(\n        leveledNodes[level - 1],\n        selectedParentNodeKeys,\n        level < skipReferenceLevel + 1\n      ),\n      filters[level]\n    );\n  }\n  return (level: number): IMapNode => leveledNodes[level] || {};\n};\n\nconst selectAndMergeNodes = (\n  node: IMapNode,\n  selectedNodeKeys: string[],\n  skipReference: boolean\n) =>\n  mergeNodes(\n    selectedNodeKeys\n      .filter(key => !!node && !!node[key])\n      .map(key => [!skipReference ? key : \"\", node![key] as IMapNode]),\n    selectedNodeKeys.length > 1\n  );\n\nexport const updateSelectedNodeKeysFrom = (\n  selectedNodeKeys: Array<string[] | null>\n) => (level: number, nodeKey: string) =>\n  selectedNodeKeys.map((old, index) =>\n    index < level\n      ? old\n      : index > level\n      ? null\n      : (old || []).includes(nodeKey)\n      ? (old || []).filter(each => each !== nodeKey)\n      : [...(old || []), nodeKey]\n  );\n\nexport const mergeNodes = (\n  parent: [string /* reference */, IMapNode][],\n  multiSelected: boolean\n): IMapNode => {\n  const newNode: IMapNode = {};\n  const childKeys = unique(\n    parent.map(([_, node]) => node).flatMap(node => Object.keys(node))\n  );\n  for (const childKey of childKeys) {\n    const childNodes: [string, IMapNode][] = parent\n      .filter(\n        ([, node]) => !!node[childKey] && typeof node[childKey] !== \"string\"\n      )\n      .map(([reference, node]) => [reference, node[childKey] as IMapNode]);\n    if (childNodes.length > 0) {\n      newNode[childKey] = mergeNodes(childNodes, multiSelected);\n    }\n\n    const childValues: [string, string][] = parent\n      .filter(\n        ([, node]) => !!node[childKey] && typeof node[childKey] === \"string\"\n      )\n      .map(([reference, node]) => [reference, node[childKey] as string]);\n\n    if (childValues.length === 1) {\n      newNode[\n        multiSelected ? buildNewKey(childKey, childValues[0][0]) : childKey\n      ] = childValues[0][1];\n    } else if (childValues.length > 1) {\n      childValues.forEach(\n        ([reference, childValue]) =>\n          (newNode[buildNewKey(childKey, reference)] = childValue)\n      );\n    }\n  }\n  return newNode;\n};\n\nconst buildNewKey = (key: string, reference: string) =>\n  !reference ? key : [key, reference].join(nodeNameDelimiter);\n\nexport const toggleAllSelectedNodeKeysFrom = (\n  selectedNodeKeys: Array<string[] | null>\n) => (level: number, model: IMapNode, selected: boolean) =>\n  selectedNodeKeys.map((old, index) =>\n    index !== level\n      ? index < level\n        ? old\n        : null\n      : selected\n      ? Object.keys(model)\n      : null\n  );\n","export const reverse = <T>(values: T[]) => [...values].reverse();\n\nexport const unique = <T>(values?: T[]) => [...new Set(values || [])];\n","import React from \"react\";\n\nconst FilterHeader: React.FC<{\n  placeholder?: string;\n  value: string | null;\n  onKeyUp?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}> = ({ placeholder, onKeyUp, value }) => (\n  <input\n    type=\"text\"\n    onKeyUp={onKeyUp}\n    placeholder={placeholder}\n    defaultValue={value || \"\"}\n  />\n);\n\nexport default FilterHeader;\n","import React from \"react\";\n\nconst NodeKey: React.FC<{\n  nodeKey: string;\n}> = ({ nodeKey }) => (\n  <React.Fragment>\n    {nodeKey.split(\" \").map((nodeKeyText, index) =>\n      index === 0 ? (\n        <span key={index} className=\"node-text\">\n          {nodeKeyText}\n        </span>\n      ) : (\n        <React.Fragment key={index}>\n          <span className=\"node-text\">{nodeKeyText}</span>\n        </React.Fragment>\n      )\n    )}\n  </React.Fragment>\n);\n\nexport default NodeKey;\n","import React from \"react\";\nimport { IMapNode } from \"../models/node\";\nimport NodeKey from \"./NodeKey\";\n\nconst SelectedButtonNode: React.FC<{\n  nodeKey: string;\n  nodeValue: IMapNode;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ nodeKey, nodeValue, onNodeKeyToggled }) => {\n  const countOfChildren = Object.keys(nodeValue).length;\n  return (\n    <button\n      className=\"selected\"\n      onClick={() => onNodeKeyToggled(nodeKey)}\n      title={`${nodeKey} (${countOfChildren})`}\n    >\n      <NodeKey nodeKey={nodeKey} />\n      <span className=\"count\">({countOfChildren})</span>\n    </button>\n  );\n};\n\nexport default SelectedButtonNode;\n","import React from \"react\";\nimport { IMapNode } from \"../models/node\";\nimport NodeKey from \"./NodeKey\";\n\nconst ButtonNode: React.FC<{\n  nodeKey: string;\n  nodeValue: IMapNode;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ nodeKey, nodeValue, onNodeKeyToggled }) => {\n  const countOfChildren = Object.keys(nodeValue).length;\n  return (\n    <button\n      onClick={() => onNodeKeyToggled(nodeKey)}\n      title={`${nodeKey} (${countOfChildren})`}\n    >\n      <NodeKey nodeKey={nodeKey} />\n      <span className=\"count\">({countOfChildren})</span>\n    </button>\n  );\n};\n\nexport default ButtonNode;\n","import React from \"react\";\nimport SelectedButtonNode from \"./SelectedButtonNode\";\nimport ButtonNode from \"./ButtonNode\";\nimport { IMapNode } from \"../models/node\";\n\nconst NonTerminalNode: React.FC<{\n  nodeKey: string;\n  nodeValue: IMapNode;\n  selectedNodeKeys: string[] | null;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ nodeKey, nodeValue, selectedNodeKeys, onNodeKeyToggled }) =>\n  !!selectedNodeKeys && selectedNodeKeys.includes(nodeKey) ? (\n    <SelectedButtonNode\n      nodeKey={nodeKey}\n      nodeValue={nodeValue}\n      onNodeKeyToggled={onNodeKeyToggled}\n    />\n  ) : (\n    <ButtonNode\n      nodeKey={nodeKey}\n      nodeValue={nodeValue}\n      onNodeKeyToggled={onNodeKeyToggled}\n    />\n  );\n\nexport default NonTerminalNode;\n","import React from \"react\";\nimport { nodeNameDelimiter } from \"../utils/node\";\n\nconst LinkNode: React.FC<{ text: string; link: string }> = ({ text, link }) => (\n  // eslint-disable-next-line\n  <a className=\"link\" href={link} title={link} target=\"_blank\">\n    <span className=\"text\">{name(text)}</span>\n    {references(text).map(reference => (\n      <span key={reference} className=\"reference\">\n        {reference}\n      </span>\n    ))}\n  </a>\n);\n\nconst name = (text: string) =>\n  text.includes(nodeNameDelimiter)\n    ? text\n        .substring(text.indexOf(\"]\") + 1, text.indexOf(nodeNameDelimiter))\n        .trim()\n    : text.substring(text.indexOf(\"]\") + 1).trim();\nconst references = (text: string) =>\n  text.includes(nodeNameDelimiter)\n    ? text\n        .substring(text.indexOf(nodeNameDelimiter) + nodeNameDelimiter.length)\n        .split(nodeNameDelimiter)\n        .map(e => e.trim())\n    : [];\n\nexport default LinkNode;\n","import React from \"react\";\n\nconst TooltipNode: React.FC<{ text: string; tooltip: string }> = ({\n  text,\n  tooltip\n}) => (\n  <span className=\"link\" title={tooltip}>\n    {text}\n  </span>\n);\n\nexport default TooltipNode;\n","import React from \"react\";\nimport LinkNode from \"./LinkNode\";\nimport TooltipNode from \"./TooltipNode\";\n\nconst TerminalNode: React.FC<{ text: string; value: string }> = ({\n  text,\n  value\n}) =>\n  /^(http|\\/|\\.)/i.test(value) ? (\n    <LinkNode text={text} link={value} />\n  ) : (\n    <TooltipNode text={text} tooltip={value} />\n  );\n\nexport default TerminalNode;\n","import React from \"react\";\nimport NonTerminalNode from \"./NonTerminalNode\";\nimport TerminalNode from \"./TerminalNode\";\nimport { IMapNode } from \"../models/node\";\n\nconst NodeView: React.FC<{\n  model: IMapNode;\n  selectedNodeKeys: string[] | null;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ model, selectedNodeKeys, onNodeKeyToggled }) => (\n  <ul>\n    {Object.entries(model)\n      .filter(([, nodeValue]) => typeof nodeValue !== \"string\")\n      .sort(compare)\n      .map(([nodeKey, nodeValue], index) => (\n        <li key={`${index}_${nodeKey}`}>\n          <NonTerminalNode\n            nodeKey={nodeKey}\n            nodeValue={nodeValue as IMapNode}\n            selectedNodeKeys={selectedNodeKeys}\n            onNodeKeyToggled={onNodeKeyToggled}\n          />\n        </li>\n      ))}\n    {Object.entries(model)\n      .filter(([, nodeValue]) => typeof nodeValue === \"string\")\n      .sort(compare)\n      .map(([nodeKey, nodeValue], index) => (\n        <li key={`${nodeKey}_${index}`}>\n          <TerminalNode text={nodeKey} value={nodeValue as string} />\n        </li>\n      ))}\n  </ul>\n);\n\ntype NodeValue = string | IMapNode;\ntype NodeEntry = [string, NodeValue];\nconst compare = (a: NodeEntry, b: NodeEntry) =>\n  typeof a[1] === \"string\"\n    ? a[0].localeCompare(b[0])\n    : count(b[1]) - count(a[1]);\n\nconst count = (node: NodeValue) =>\n  typeof node === \"string\" ? node.length : Object.keys(node).length;\n\nexport default NodeView;\n","import { useState as useReactState } from \"react\";\n\nexport const viewStateStore = <S extends { [K in keyof S]: S[K] }>(\n  initial: S | null,\n  notify: (newState: Partial<S>) => void\n) => <K extends keyof S>(\n  key: K,\n  generateNewValue: () => S[K]\n): [S[K], ((newValue: S[K]) => void)] => {\n  const [value, set] = useReactState<S[K]>(\n    initial && initial[key] ? initial[key] : generateNewValue()\n  );\n  return [\n    value,\n    (newValue: S[K]) => {\n      notify({ [key]: newValue } as any); // Please help!\n      set(newValue);\n    }\n  ];\n};\n","import copy from \"clipboard-copy\";\nimport React from \"react\";\nimport {\n  ContextMenu,\n  ContextMenuTrigger,\n  MenuItem,\n  SubMenu\n} from \"react-contextmenu\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport { IMap } from \"../models/map\";\nimport {\n  getNodeFrom,\n  updateSelectedNodeKeysFrom,\n  toggleAllSelectedNodeKeysFrom\n} from \"../utils/node\";\nimport FilterHeader from \"./FilterHeader\";\nimport NodeView from \"./NodeView\";\nimport { updateFiltersFrom } from \"../utils/filter\";\nimport { IViewState } from \"../models/state\";\nimport { viewStateStore } from \"../utils/state\";\n\nconst MapView: React.FC<{\n  map: IMap;\n  viewState: IViewState | null;\n  setViewState: (newState: Partial<IViewState>) => void;\n}> = ({ map: { headers, body }, viewState, setViewState }) => {\n  const useViewState = viewStateStore(viewState, setViewState);\n  const newNullArray = () => Array(headers.length).fill(null);\n  const [selectedNodeKeys, setSelectedNodeKeys] = useViewState(\n    \"selectedNodeKeys\",\n    newNullArray\n  );\n  const [filters, setFilters] = useViewState(\"filters\", newNullArray);\n  const [skipReferenceLevel, setSkipReferenceLevel] = useViewState(\n    \"skipReferenceLevel\",\n    () => 0\n  );\n\n  const [debouncedFilter] = useDebouncedCallback(\n    ({ level, value }: { level: number; value: string }) =>\n      setFilters(updateFilters(level, value)),\n    100\n  );\n\n  const shareUrl = () => {\n    copy(window.location.href);\n    alert(`URL copied!\\n` + window.location.href);\n  };\n\n  const getNode = getNodeFrom(\n    body,\n    selectedNodeKeys,\n    filters,\n    viewState ? viewState.query : null,\n    skipReferenceLevel\n  );\n  const updateFilters = updateFiltersFrom(filters);\n  const toggleSelectedNodeKey = updateSelectedNodeKeysFrom(selectedNodeKeys);\n  const toggleSelectedNodeKeys = toggleAllSelectedNodeKeysFrom(\n    selectedNodeKeys\n  );\n  return (\n    <div className=\"row\">\n      {headers.map((header, level) => {\n        const model = getNode(level);\n        const selectedNodeKeysOfCurrentLevel = selectedNodeKeys[level];\n        const hasSelected =\n          selectedNodeKeysOfCurrentLevel !== null &&\n          selectedNodeKeysOfCurrentLevel.length > 0;\n        const className = hasSelected ? `column selected` : `column`;\n        const toggleAll = (selected: boolean) =>\n          setSelectedNodeKeys(toggleSelectedNodeKeys(level, model, selected));\n        return (\n          <div key={header} className={className}>\n            <FilterHeader\n              placeholder={header}\n              value={filters[level]}\n              onKeyUp={event =>\n                debouncedFilter({\n                  level,\n                  value: (event.target as HTMLInputElement).value\n                })\n              }\n            />\n            <ContextMenuTrigger id={`ToggleMenu-${header}`}>\n              <NodeView\n                model={model}\n                selectedNodeKeys={selectedNodeKeysOfCurrentLevel}\n                onNodeKeyToggled={nodeKey =>\n                  setSelectedNodeKeys(toggleSelectedNodeKey(level, nodeKey))\n                }\n              />\n            </ContextMenuTrigger>\n            <ContextMenu id={`ToggleMenu-${header}`}>\n              {level < headers.length - 1 && (\n                <React.Fragment>\n                  <MenuItem onClick={() => toggleAll(true)}>\n                    Select all\n                  </MenuItem>\n                  <MenuItem onClick={() => toggleAll(false)}>\n                    Deselect all\n                  </MenuItem>\n                </React.Fragment>\n              )}\n              <MenuItem onClick={shareUrl}>Copy this URL</MenuItem>\n              {level === headers.length - 1 && (\n                <SubMenu title=\"Skip Reference Level\">\n                  {Array(headers.length - 1)\n                    .fill(0)\n                    .map((_, index) => (\n                      <MenuItem\n                        key={`skipRefLevel_${index}`}\n                        disabled={skipReferenceLevel === index}\n                        onClick={() => setSkipReferenceLevel(index)}\n                      >\n                        {index}\n                      </MenuItem>\n                    ))}\n                </SubMenu>\n              )}\n            </ContextMenu>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default MapView;\n","import React from \"react\";\n\nconst MapSourceUrl: React.FC<{\n  url: string | null;\n  setUrl: (newUrl: string) => void;\n}> = ({ url, setUrl }) => (\n  <div className=\"sourceUrl\">\n    <input\n      type=\"text\"\n      defaultValue={url || \"\"}\n      placeholder=\"Map JSON URL\"\n      onKeyPress={event =>\n        event.key === \"Enter\"\n          ? setUrl((event.target as HTMLInputElement).value)\n          : undefined\n      }\n    />\n  </div>\n);\n\nexport default MapSourceUrl;\n","export const getMapUrlFromQueryString = () => {\n  if (!window || !window.location || !window.location.search) {\n    return null;\n  }\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"map\");\n};\n","import React from \"react\";\n\nconst QueryHeader: React.FC<{\n  placeholder?: string;\n  value: string | null;\n  onKeyUp?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}> = ({ placeholder, onKeyUp, value }) => (\n  <div className=\"query\">\n    <input\n      type=\"text\"\n      onKeyUp={onKeyUp}\n      placeholder={placeholder}\n      defaultValue={value || \"\"}\n    />\n  </div>\n);\n\nexport default QueryHeader;\n","import lz from \"lzutf8\";\n\nconst getCurrentUrl = () => {\n  if (!window || !window.location) {\n    throw new Error(`Invalid window.location`);\n  }\n  const currentUrl = window.location.href;\n  if (!currentUrl) {\n    throw new Error(`Invalid window.location.href`);\n  }\n  return currentUrl;\n};\n\nconst buildShareUrl = <T>(state: T) => {\n  const currentUrl = getCurrentUrl();\n  const hashIndex = currentUrl.indexOf(\"#\");\n  return (\n    (hashIndex >= 0 ? currentUrl.substring(0, hashIndex) : currentUrl) +\n    \"#\" +\n    lz.compress(JSON.stringify(state), { outputEncoding: \"Base64\" })\n  );\n};\n\nconst gotoShareUrl = <T>(state: T) =>\n  window.location.replace(buildShareUrl(state));\n\nconst getStateFromUrl = <T>(): T | null => {\n  const currentUrl = getCurrentUrl();\n  const hashIndex = currentUrl.indexOf(\"#\");\n  if (hashIndex < 0) {\n    return null;\n  }\n  try {\n    return JSON.parse(\n      lz.decompress(currentUrl.substring(hashIndex + 1), {\n        inputEncoding: \"Base64\"\n      })\n    ) as T;\n  } catch (error) {\n    console.error(`Invalid state at URL`, error);\n    return null;\n  }\n};\n\nexport const useStateFromUrl = <T>(): [\n  T | null,\n  (newValue: Partial<T> | null) => void\n] => {\n  const value = getStateFromUrl<T>();\n  return [\n    value,\n    (newValue: Partial<T> | null) =>\n      gotoShareUrl({ ...(value || {}), ...(newValue || {}) })\n  ];\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport \"./App.css\";\nimport MapView from \"./components/MapView\";\nimport { IMap } from \"./models/map\";\nimport MapSourceUrl from \"./components/MapSourceUrl\";\nimport { getMapUrlFromQueryString } from \"./utils/parameter\";\nimport QueryHeader from \"./components/QueryHeader\";\nimport { IViewState } from \"./models/state\";\nimport { useStateFromUrl } from \"./utils/share\";\nimport { viewStateStore } from \"./utils/state\";\n\nconst App: React.FC = () => {\n  const [map, setMap] = useState<IMap | null>(null);\n\n  const [viewState, setViewState] = useStateFromUrl<IViewState>();\n  const useViewState = viewStateStore(viewState, setViewState);\n  const [query, setQuery] = useViewState(\"query\", () => \"\");\n  const [url, setUrl] = useViewState(\"mapUrl\", getMapUrlFromQueryString);\n\n  const [debouncedQuery] = useDebouncedCallback(\n    (newQuery: string) => setQuery(newQuery),\n    200\n  );\n\n  useEffect(() => {\n    if (url) {\n      fetch(url)\n        .then(r => r.json())\n        .then(data => setMap(data))\n        .catch(error => {\n          setMap(null);\n          console.error(error);\n          alert(error.message);\n        });\n    }\n  }, [url]);\n  return (\n    <div className=\"app\">\n      <MapSourceUrl url={url} setUrl={setUrl} />\n      {map && (\n        <React.Fragment>\n          <QueryHeader\n            placeholder=\"Query\"\n            value={query}\n            onKeyUp={event =>\n              debouncedQuery((event.target as HTMLInputElement).value)\n            }\n          />\n          <MapView map={map} {...{ viewState, setViewState }} />\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}