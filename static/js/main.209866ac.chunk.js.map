{"version":3,"sources":["utils/node.ts","utils/filter.ts","components/FilterHeader.tsx","components/SelectedButtonNode.tsx","components/ButtonNode.tsx","components/NonTerminalNode.tsx","components/LinkNode.tsx","components/TooltipNode.tsx","components/TerminalNode.tsx","components/NodeView.tsx","components/MapView.tsx","components/MapSourceUrl.tsx","App.tsx","utils/parameter.ts","serviceWorker.ts","index.tsx"],"names":["getNodeFrom","root","allOfSelectedNodeKeys","filters","applyFilter","node","level","condition","result","Object","keys","nodeKey","includes","some","each","applyFilterFrom","i","selectedNodeKeys","selectAndMergeNodes","mergeNodes","filter","key","map","length","parent","multiSelected","newNode","childKeys","unique","flatMap","childKey","childNodes","childValues","buildNewKey","forEach","reference","childValue","join","values","Set","FilterHeader","placeholder","onKeyUp","type","SelectedButtonNode","nodeValue","onNodeKeyToggled","countOfChildren","className","onClick","title","ButtonNode","NonTerminalNode","prefix","text","substring","indexOf","trim","name","references","split","e","LinkNode","link","href","target","TooltipNode","tooltip","TerminalNode","value","test","compare","a","b","localeCompare","count","NodeView","model","entries","sort","MapView","headers","body","newNullArray","Array","fill","useState","setSelectedNodeKeys","setFilters","getNode","updateFilters","newValue","old","index","updateFiltersFrom","toggleSelectedNodeKey","updateSelectedNodeKeysFrom","header","selectedNodeKeysOfCurrentLevel","event","MapSourceUrl","url","setUrl","defaultValue","onKeyPress","undefined","App","window","location","search","URLSearchParams","get","setMap","useEffect","fetch","then","r","json","data","catch","error","console","alert","message","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.209866ac.chunk.js","sourcesContent":["import { IMapNode } from \"../models/node\";\nimport { applyFilterFrom } from \"./filter\";\n\nexport const nodeNameDelimiter = '$$';\n\nexport const getNodeFrom = (\n  root: IMapNode,\n  allOfSelectedNodeKeys: Array<string[] | null>,\n  filters: Array<string | null>\n) => {\n  const applyFilter = applyFilterFrom(filters);\n  return (level: number): IMapNode => {\n    let node: IMapNode = applyFilter(root, 0);\n    for (let i = 0; i < level; i++) {\n      const selectedNodeKeys = allOfSelectedNodeKeys[i];\n      if (!selectedNodeKeys) {\n        return {};\n      }\n      node = applyFilter(selectAndMergeNodes(node, selectedNodeKeys), i + 1);\n      if (!node) {\n        return {};\n      }\n    }\n    return node;\n  };\n};\n\nconst selectAndMergeNodes = (node: IMapNode, selectedNodeKeys: string[]) =>\n  mergeNodes(selectedNodeKeys\n    .filter(key => !!node && !!node[key])\n    .map(key => [key, node![key] as IMapNode]),\n    selectedNodeKeys.length > 1);\n\nexport const updateSelectedNodeKeysFrom = (\n  selectedNodeKeys: Array<string[] | null>\n) => (level: number, nodeKey: string) =>\n    selectedNodeKeys.map((old, index) =>\n      index < level ? old : index > level ? null\n        : (old || []).includes(nodeKey)\n          ? (old || []).filter(each => each !== nodeKey)\n          : [...(old || []), nodeKey]\n    );\n\nexport const mergeNodes = (parent: [string /* reference */, IMapNode][], multiSelected: boolean): IMapNode => {\n  const newNode: IMapNode = {};\n  const childKeys = unique(parent.map(([_, node]) => node).flatMap(node => Object.keys(node)));\n  for (const childKey of childKeys) {\n    const childNodes: [string, IMapNode][] = parent\n      .filter(([, node]) => !!node[childKey] && typeof node[childKey] !== 'string')\n      .map(([reference, node]) => [reference, node[childKey] as IMapNode]);\n    if (childNodes.length > 0) {\n      newNode[childKey] = mergeNodes(childNodes, multiSelected);\n    }\n\n    const childValues: [string, string][] = parent\n      .filter(([, node]) => !!node[childKey] && typeof node[childKey] === 'string')\n      .map(([reference, node]) => [reference, node[childKey] as string]);\n\n    if (childValues.length === 1) {\n      newNode[multiSelected ? buildNewKey(childKey, childValues[0][0]) : childKey] = childValues[0][1];\n    }\n    else if (childValues.length > 1) {\n      childValues.forEach(([reference, childValue]) =>\n        newNode[(buildNewKey(childKey, reference))] = childValue\n      );\n    }\n  }\n  return newNode;\n}\n\nconst buildNewKey = (key: string, reference: string) => [key, reference].join(nodeNameDelimiter);\n\nconst unique = <T>(values?: T[]) => [...new Set(values || [])];\n","import { IMapNode } from \"../models/node\";\n\nexport const applyFilterFrom = (filters: Array<string | null>) => (\n  node: IMapNode,\n  level: number\n): IMapNode => {\n  if (!node) {\n    return {} as IMapNode;\n  }\n  const condition = filters[level];\n  if (!condition) {\n    return node;\n  }\n  const result: IMapNode = {};\n  for (const nodeKey of Object.keys(node)) {\n    if (\n      nodeKey.includes(condition) ||\n      (typeof node[nodeKey] !== \"string\" &&\n        Object.keys(node[nodeKey]).some(each => each.includes(condition)))\n    ) {\n      result[nodeKey] = node[nodeKey];\n    }\n  }\n  return result;\n};\n\nexport const updateFiltersFrom = (filters: Array<string | null>) => (\n  level: number,\n  newValue: string\n) => filters.map((old, index) => (index !== level ? old : newValue));\n","import React from \"react\";\n\nconst FilterHeader: React.SFC<{\n  placeholder?: string;\n  onKeyUp?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}> = ({ placeholder, onKeyUp }) => (\n  <input type=\"text\" onKeyUp={onKeyUp} placeholder={placeholder} />\n);\n\nexport default FilterHeader;\n","import React from \"react\";\nimport { IMapNode } from \"../models/node\";\n\nconst SelectedButtonNode: React.SFC<{\n  nodeKey: string;\n  nodeValue: IMapNode;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ nodeKey, nodeValue, onNodeKeyToggled }) => {\n  const countOfChildren = Object.keys(nodeValue).length;\n  return (\n    <button\n      className=\"selected\"\n      onClick={() => onNodeKeyToggled(nodeKey)}\n      title={`${nodeKey} (${countOfChildren})`}\n    >\n      {nodeKey}\n      <span className=\"count\">({countOfChildren})</span>\n    </button>\n  );\n};\n\nexport default SelectedButtonNode;\n","import React from \"react\";\nimport { IMapNode } from \"../models/node\";\n\nconst ButtonNode: React.SFC<{\n  nodeKey: string;\n  nodeValue: IMapNode;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ nodeKey, nodeValue, onNodeKeyToggled }) => {\n  const countOfChildren = Object.keys(nodeValue).length;\n  return (\n    <button\n      onClick={() => onNodeKeyToggled(nodeKey)}\n      title={`${nodeKey} (${countOfChildren})`}\n    >\n      {nodeKey}\n      <span className=\"count\">({countOfChildren})</span>\n    </button>\n  );\n};\n\nexport default ButtonNode;\n","import React from \"react\";\nimport SelectedButtonNode from \"./SelectedButtonNode\";\nimport ButtonNode from \"./ButtonNode\";\nimport { IMapNode } from \"../models/node\";\n\nconst NonTerminalNode: React.SFC<{\n  nodeKey: string;\n  nodeValue: IMapNode;\n  selectedNodeKeys: string[] | null;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ nodeKey, nodeValue, selectedNodeKeys, onNodeKeyToggled }) =>\n    !!selectedNodeKeys && selectedNodeKeys.includes(nodeKey) ? (\n      <SelectedButtonNode nodeKey={nodeKey} nodeValue={nodeValue} onNodeKeyToggled={onNodeKeyToggled} />\n    ) : (\n        <ButtonNode nodeKey={nodeKey} nodeValue={nodeValue} onNodeKeyToggled={onNodeKeyToggled} />\n      );\n\nexport default NonTerminalNode;\n","import React from \"react\";\nimport { nodeNameDelimiter } from \"../utils/node\";\n\nconst LinkNode: React.SFC<{ text: string; link: string }> = ({\n  text,\n  link\n}) => (\n    // eslint-disable-next-line\n    <a className=\"link\" href={link} title={link} target=\"_blank\">\n      {references(text).map(reference => <span key={reference} className=\"reference\">{reference}</span>)}\n      <span className=\"prefix\">{prefix(text)}</span>\n      <span className=\"text\">{name(text)}</span>\n    </a>\n  );\n\nconst prefix = (text: string) =>\n  text.substring(text.indexOf('[') + 1, text.indexOf(']')).trim();\nconst name = (text: string) =>\n  text.includes(nodeNameDelimiter)\n    ? text.substring(text.indexOf(']') + 1, text.indexOf(nodeNameDelimiter)).trim()\n    : text.substring(text.indexOf(']') + 1).trim();\nconst references = (text: string) =>\n  text.includes(nodeNameDelimiter)\n    ? text.substring(text.indexOf(nodeNameDelimiter) + nodeNameDelimiter.length).split(nodeNameDelimiter).map(e => e.trim())\n    : [];\n\nexport default LinkNode;\n","import React from \"react\";\n\nconst TooltipNode: React.SFC<{ text: string; tooltip: string }> = ({\n  text,\n  tooltip\n}) => (\n  <span className=\"link\" title={tooltip}>\n    {text}\n  </span>\n);\n\nexport default TooltipNode;\n","import React from \"react\";\nimport LinkNode from \"./LinkNode\";\nimport TooltipNode from \"./TooltipNode\";\n\nconst TerminalNode: React.SFC<{ text: string; value: string }> = ({\n  text,\n  value\n}) =>\n  /^(http|\\/|\\.)/i.test(value) ? (\n    <LinkNode text={text} link={value} />\n  ) : (\n    <TooltipNode text={text} tooltip={value} />\n  );\n\nexport default TerminalNode;\n","import React from \"react\";\nimport NonTerminalNode from \"./NonTerminalNode\";\nimport TerminalNode from \"./TerminalNode\";\nimport { IMapNode } from \"../models/node\";\n\nconst NodeView: React.SFC<{\n  model: IMapNode;\n  selectedNodeKeys: string[] | null;\n  onNodeKeyToggled: (nodeKey: string) => void;\n}> = ({ model, selectedNodeKeys, onNodeKeyToggled }) => (\n  <ul>\n    {Object.entries(model)\n      .filter(([, nodeValue]) => typeof nodeValue !== \"string\")\n      .sort(compare)\n      .map(([nodeKey, nodeValue]) => (\n        <li key={nodeKey}>\n          <NonTerminalNode\n            nodeKey={nodeKey}\n            nodeValue={nodeValue as IMapNode}\n            selectedNodeKeys={selectedNodeKeys}\n            onNodeKeyToggled={onNodeKeyToggled}\n          />\n        </li>\n      ))}\n    {Object.entries(model)\n      .filter(([, nodeValue]) => typeof nodeValue === \"string\")\n      .sort(compare)\n      .map(([nodeKey, nodeValue]) => (\n        <li key={nodeKey}>\n          <TerminalNode text={nodeKey} value={nodeValue as string} />\n        </li>\n      ))}\n  </ul>\n);\n\ntype NodeValue = string | IMapNode;\ntype NodeEntry = [string, NodeValue];\nconst compare = (a: NodeEntry, b: NodeEntry) =>\n  typeof a[1] === 'string'\n    ? a[0].localeCompare(b[0])\n    : count(b[1]) - count(a[1])\n\nconst count = (node: NodeValue) => typeof node === 'string' ? node.length : Object.keys(node).length;\n\nexport default NodeView;\n","import React, { useState } from \"react\";\nimport { IMap } from \"../models/map\";\nimport { getNodeFrom, updateSelectedNodeKeysFrom } from \"../utils/node\";\nimport FilterHeader from \"./FilterHeader\";\nimport NodeView from \"./NodeView\";\nimport { updateFiltersFrom } from \"../utils/filter\";\n\nconst MapView: React.SFC<{ map: IMap }> = ({ map: { headers, body } }) => {\n  const newNullArray = () => Array(headers.length).fill(null);\n  const [selectedNodeKeys, setSelectedNodeKeys] = useState<\n    Array<string[] | null>\n  >(newNullArray());\n  const [filters, setFilters] = useState<Array<string | null>>(newNullArray());\n\n  const getNode = getNodeFrom(body, selectedNodeKeys, filters);\n  const updateFilters = updateFiltersFrom(filters);\n  const toggleSelectedNodeKey = updateSelectedNodeKeysFrom(selectedNodeKeys);\n  return (\n    <div className=\"row\">\n      {headers.map((header, level) => {\n        const model = getNode(level);\n        const selectedNodeKeysOfCurrentLevel = selectedNodeKeys[level];\n        const hasSelected =\n          selectedNodeKeysOfCurrentLevel !== null &&\n          selectedNodeKeysOfCurrentLevel.length > 0;\n        const className = hasSelected ? `column selected` : `column`;\n        return (\n          <div key={header} className={className}>\n            <FilterHeader\n              placeholder={header}\n              onKeyUp={event =>\n                setFilters(\n                  updateFilters(level, (event.target as HTMLInputElement).value)\n                )\n              }\n            />\n            <NodeView\n              model={model}\n              selectedNodeKeys={selectedNodeKeysOfCurrentLevel}\n              onNodeKeyToggled={nodeKey =>\n                setSelectedNodeKeys(toggleSelectedNodeKey(level, nodeKey))\n              }\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default MapView;\n","import React from \"react\";\n\nconst MapSourceUrl: React.SFC<{\n  url: string | null;\n  setUrl: (newUrl: string) => void;\n}> = ({ url, setUrl }) => (\n  <div className=\"sourceUrl\">\n    <input\n      type=\"text\"\n      defaultValue={url || \"\"}\n      placeholder=\"Map JSON URL\"\n      onKeyPress={event =>\n        event.key === \"Enter\"\n          ? setUrl((event.target as HTMLInputElement).value)\n          : undefined\n      }\n    />\n  </div>\n);\n\nexport default MapSourceUrl;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport MapView from \"./components/MapView\";\nimport { IMap } from \"./models/map\";\nimport MapSourceUrl from \"./components/MapSourceUrl\";\nimport { getMapUrlFromQueryString } from \"./utils/parameter\";\n\nconst App: React.SFC = () => {\n  const [url, setUrl] = useState<string | null>(getMapUrlFromQueryString());\n  const [map, setMap] = useState<IMap | null>(null);\n  useEffect(() => {\n    if (url) {\n      fetch(url)\n        .then(r => r.json())\n        .then(data => setMap(data))\n        .catch(error => {\n          setMap(null);\n          console.error(error);\n          alert(error.message);\n        });\n    }\n  }, [url]);\n  return (\n    <div className=\"app\">\n      <MapSourceUrl url={url} setUrl={setUrl} />\n      {map && <MapView map={map} />}\n    </div>\n  );\n};\n\nexport default App;\n","export const getMapUrlFromQueryString = () => {\n  if (!window || !window.location || !window.location.search) {\n    return null;\n  }\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"map\");\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}